/**************************************************************************************************
  Filename:       SensorTag_Main.c
  Revised:        $Date: 2012-08-08 17:04:23 -0700 (Wed, 08 Aug 2012) $
  Revision:       $Revision: 31161 $

  Description:    This file contains the main and callback functions for
                  the Sensor Tag sample application.

  Copyright 2012  Texas Instruments Incorporated. All rights reserved.

  IMPORTANT: Your use of this Software is limited to those specific rights
  granted under the terms of a software license agreement between the user
  who downloaded the software, his/her employer (which must be your employer)
  and Texas Instruments Incorporated (the "License").  You may not use this
  Software unless you agree to abide by the terms of the License. The License
  limits your use, and you acknowledge, that the Software may not be modified,
  copied or distributed unless embedded on a Texas Instruments microcontroller
  or used solely and exclusively in conjunction with a Texas Instruments radio
  frequency transceiver, which is integrated into your product.  Other than for
  the foregoing purpose, you may not use, reproduce, copy, prepare derivative
  works of, modify, distribute, perform, display or sell this Software and/or
  its documentation for any purpose.

  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
  PROVIDED “AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
  INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
  NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
  TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
  LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
  INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
  OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
  OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
  (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.

  Should you have any questions regarding your right to use this Software,
  contact Texas Instruments Incorporated at www.TI.com.
**************************************************************************************************/

/**************************************************************************************************
 *                                           Includes
 **************************************************************************************************/
/* Hal Drivers 
#include "hal_types.h"
#include "hal_key.h"
#include "hal_timer.h"
#include "hal_drivers.h"
#include "hal_led.h"
#include "hal_assert.h"
#include "hal_uart.h" */


#include <ioCC2541.h>
#include <hal_defs.h>
#include <hal_board_cfg.h>
#include <hal_sensor.h>
#include <hal_irtemp.h>
#include <hal_humi.h>
#include <hal_mag.h>

/* Application */
//#include "SensorTag.h"

// sleep timer interrupt control
#define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= BV(5);)  // enable sleep timer interrupt
#define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~BV(5);) // disable sleep timer interrupt
#define HAL_SLEEP_TIMER_CLEAR_INT()         st(IRCON &= ~0x80;)   // clear sleep interrupt flag


#define POWER_SAVING
#define OSC32K_CRYSTAL_INSTALLED = TRUE

/**************************************************************************************************
 * FUNCTIONS
 **************************************************************************************************/

/**************************************************************************************************
 * @fn          main
 *
 * @brief       Start of application.
 *
 * @param       none
 *
 * @return      none
 **************************************************************************************************
 */

#define SERIAL_APP_PORT HAL_UART_PORT_0
#define SERIAL_APP_BAUD HAL_UART_BR_9600
// When the Rx buf space is less than this threshold, invoke the Rx callback.
#define SERIAL_APP_THRESH 64
#define SERIAL_APP_RX_SZ 128
#define SERIAL_APP_TX_SZ 128
// Millisecs of idle time after a byte is received before invoking Rx callback.
#define SERIAL_APP_IDLE 6
#define SERIAL_APP_TX_MAX 80
#define SERIAL_APP_RSP_CNT 4
#define SERIAL_APP_LOOPBACK FALSE

 unsigned int ISR_Counter = 0;
 uint16 loop_Counter = 0;
 
void main(void)
{
  
  // Led 1: 1.0
  // Led 2: 0.4
  //Button Side: 0.0
  //Button 2: 1.6
  //Button 3: 1.7

  HAL_BOARD_INIT();
    
  P1DIR |= BV(0);
  P0DIR |= BV(4);
  
  P1_0 = 1;
  P0_4 = 1;
  
  
    /* Rising/Falling edge configuratinn */
  //  PICTL |= BV(0);   /* Set the edge bit to set falling edge to give int */

    // See family user guide for register bit map
    
    /* Side Switch */
    P0SEL &= ~(BV(0));    /* Set pin function to GPIO */
    P0DIR &= ~(BV(0));    /* Set pin direction to Input */
    P0IEN |= BV(0);    /* enable interrupt generation at port */
    IEN1  |= BV(5);    /* enable CPU interrupt for all of port 0*/
    P0IFG = ~(BV(0));  /* Clear any pending interrupt */

    /* Carbon Switches */
    //P1SEL &= ~(BV(6));    /* Set pin function to GPIO */
    //P1DIR &= ~(BV(6));    /* Set pin direction to Input */
    //P1IEN |= BV(6); /* enable interrupt generation at port */
    //IEN2 |= BV(4);   /* enable CPU interrupt */
    //P1IFG = ~(BV(6));  /* Clear any pending interrupt */

    //P1SEL &= ~(BV(7));    /* Set pin function to GPIO */
    //P1DIR &= ~(BV(7));    /* Set pin direction to Input */
    //P1IEN |= BV(7); /* enable interrupt generation at port */
    //IEN2 |= BV(4);   /* enable CPU interrupt */
    //P1IFG = (uint8)(~(BV(7)));  /* Clear any pending interrupt */
    
 /*************************************************************************/
    
  /*Setup the UART */
  
  /* Set UART0 to alternate (UART) mode */  
  //PERCFG |= BV(0);
  
  /*Give the UART priority on the pins */
  //P1DIR |= BV(4)|BV(5);
  //P1SEL |= BV(4)|BV(5);
   
  /*UART Mode */
  //U0CSR |= BV(7);
  
  /*BAUD rate setting : 9600 ... baud_m = 59  baud_e = 8 for 32 MHz */
  //U0GCR |= 8;  //BAUD_E
  //U0BAUD |= 59; //BAUD_M  
  
  //U0GCR |= BV(5);
  
  /*Enable UART receiver */
  //U0CSR |= BV(6);  
 
  /************************************************************************/
  
  /*setup timer 1 to define the sensor poll period */
   
  //T1CTL &= ~BV(1);  //stop the timer (just in case)
  
  /*    Modulo mode | tick freq / 128 */
  //T1CTL |=  BV(2) | BV(3);
    
  /*How high the counter counts before overflowing*/
  //T1CC0H = 0x00;
  //T1CC0L = 0xFF;
  
  //1. Clear interrupt flags.  T2IRQF = ~(1 << 3);
  //T1STAT = ~(1 << 5);
  //T1IF = 0;
  
  //2. Set individual interrupt-enable bit in the peripherals SFR register, if any.
  //T1CCTL0 |= BV(6);
  
  //3. Set the corresponding individual interrupt-enable bit in the IEN0, IEN1, or IEN2 register to 1.
  //IEN1 |= BV(1);
   
  /*Clear the flags*/
  //T1IF = 0;
  //T1OVFIM = 0;  
  //TIMIF &= ~BV(6);
    
 /* led flicker */
 //T1CCTL2 &= ~BV(6);
 //P0SEL |= BV(4);
 
 //T1CC2H = 0xFF;
 //T1CC2L = 0xFF;
 
 //T1CCTL2 |= BV(3) | BV(4) | BV(5);
 //T1CCTL2 |= BV(2);  //Compare mode
 //T1CCTL2 |= BV(4);  //Toggle on compare
 
  //T1CCTL2 |= BV(6);
  
  
  //T1CTL |= BV(1); //start the timer in modulo mode  
  //T1IE = 1;
 /*************************************************************************/
  //Timer 4.0  - led 1.0
//    //PERCFG |= 0x20;             // Timer 3 Alternate location 2
//    P1DIR |= BV(0);              // P1_0 = output
//    P1SEL |= BV(0);              // Peripheral function on P1_0

//    T4CTL &= ~0x10;             // Stop timer 3 (if it was running)
//    T4CTL |= 0x04;              // Clear timer 3
//    T4CTL &= ~0x08;             // Disable Timer 3 overflow interrupts
 //   T4CTL |= 0x02;              // Timer 3 mode = 3 - Up/Down

//    T4CCTL0 &= ~0x40;           // Disable channel 0 interrupts
//    T4CCTL0 |= 0x04;            // Ch0 mode = compare
//    T4CCTL0 |= 0x10;            // Ch0 output compare mode = toggle on compare

    // Update registers
//    T4CTL |=  BV(5) | BV(6) | BV(7);
//    T4CC0 = (uint8)255;

    // Start timer
//    T4CTL |= BV(4);
 /************************************************************************/
  //HALIRTempInit();
  //HalHumiInit();
  
              /*//Watchdog timer in timer mode 
    WDCTL |= BV(0) | BV(1);
    WDCTL |= BV(2) | BV(3); //start in timer mode
    IEN2 |= BV(5);
    WDTIF = 0;
*/  
    
 /*****************************************************************************/
    //Configure sleep timer
    
    HAL_SLEEP_TIMER_DISABLE_INT();
    
    ST2 = 0x00;
    ST1 = 0xFF;
    ST0 = 0x00;
    
  HAL_SLEEP_TIMER_CLEAR_INT();
  HAL_SLEEP_TIMER_ENABLE_INT();
 
     
   HAL_SLEEP_PREP_POWER_MODE(halPwrMgtMode);

   // save interrupt enable registers and disable all interrupts
   HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
  
  
  
  HAL_ENABLE_INTERRUPTS();
  
  
  
  
  
  
   //uint8 IRTemp[4];
  //IRTemperature_States_t IRstatus = HalIRTempStatus();
  // HalMagInit();
   //HalMagTurnOn();
   //uint8 mag[6];
   
   
  // bool mag_ready = HalMagRead(&mag[0]);
   
   //if (mag_ready) { P1_0 = 1; }
   
   uint8 i = 0;
   while(1){ 
     
   //HalIRTempTurnOn();
   //while( IRstatus != TMP006_DATA_READY){IRstatus = HalIRTempStatus();}
   //bool IR_success = HalIRTempRead(&IRTemp[0]);
   //HalIRTempTurnOff();
     
     //}
   // U0DBUF = T1CNTL; 
    if (loop_Counter == 0){        
        i++;
    P0_4 ^= 1;
    //HalMagRead(&mag[0]);
     }
    loop_Counter++;
    
    }
   
}
/**************************************************************************************************
                                           CALL-BACKS
**************************************************************************************************/



/*Side Switch button */
_PRAGMA(vector=P0INT_VECTOR) 
__interrupt void port0_ISR(void)
{
  if ( P0IFG &  BV(0) )         //If interrupt source is switch 0.0
  {
    P1_0 ^= 1; // P1.0 = toggle
  }

  ISR_Counter++;
  STIF = 1;
  //Clear the CPU interrupt flag for Port_0 PxIFG has to be cleared before PxIF
  P0IFG = 0;
  P0IF = 0;

}


/*Timer 1 interrupt */
_PRAGMA(vector=ST_VECTOR)
__interrupt void SLEEP_ISR(void)
{
  P1_0 ^= 1; // P1.0 = toggle
  HAL_SLEEP_TIMER_CLEAR_INT();
  ISR_Counter++;
  
  
}

/*UART TX callback */
_PRAGMA(vector=UTX0_VECTOR)
__interrupt void TX_ISR(void)
{
P1_0 ^= 1;

}


/*************************************************************************************************
**************************************************************************************************/
