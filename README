*** Rocket Pack************************************

Project Synopsis
--------------------

Rocket pack is a development board based around the MSP430FR5739 microcontroller
and the Digi Xbee S3B Pro 900MHz zigbee radio.  The board is intended to 
facilitate broadcasting real time, high-rate sensor data over a range of several
hundred meters.  The board is designed to interface with custom built sensor 
packages, or with the TI sensorTag development board running custom firmware


Power Supply
----------------------
The board has on-board battery management designed specifically for single cell
lipo batteries, but will also take any voltage source between 3.3V and 5VDC.
The regualted 3.2V rail is availible on all three expansion headers as well as 
the CCdebugger header, which is designed specifically to power the sensorTag
development board.   



Communications
----------------------
The MSP430FR5739 contains two hardware USART's.  One USART is reserved for the
zigbee radio, while the other is broken out to both the serial data header and 
the ez430 programming/debug header.  All signals reqired for I2C, SPI or UART 
are availible on the serial data header

The firmware is written to buffer both inbound and outbound traffic.  The MCU 
pops bytes into the rx buffers in low power mode.  Once a line term char is RX'd,
LPM is exited and the full packet is processed.

No data is transmitted until a full packet is buffered.  Then it is transmitted
entirely before additional data is processed.  


Node power up sequence
-----------------------------------

sleep loop
-----------
1. Boot
2. Hold sensors in reset
3. Read and store radio address
4. Boot sensors
5. Read and store cal data
6. Sleep sensors

{
Auto discovery
---------------------
1. Poll magentometer
2. Broadcast host discover on trigger
3. Repeat until node select rxd
4. TX ACK
}

Wake up loop (on rx of node select)
-------------
7. TX ACK
8. Wait for command
   8a. Send cal data
   8b. Start data stream
  
On ~node select
----------------
1. Sleep sensors
2. Wait for wake up 

  Packet Formatting
  -----------------------------------------
  [0x01] [address] [0x00]
  host discover   0x01     Broadcast by the host to the base station to announce
                           its presence.
  [0x02] [command] [data] [0x00]                         
  command         0x02     Base -> node: command for remote node to execute
                           node -> base: return of command
                           
                  commands
                     0x01  Stop transmitting data
                     0x02  Start transmitting data
                     0x03  Change sensor profile
                     0x04  Reboot         
  
  
  cal data        0x03     Base -> node: Request calibration data 
                           node -> base: Return calibration data   
  
  data packet     0x04     node -> base: Data 

  node select     0x05     base -> node: address of node to be active..all other sleep

  ACK             0x06     command ACK
  
  NACK            0x07     command NACK
SensorTag
----------------------




 Errata
 ---------------------
 
 V0.1:
       Debug header location:  The location of the debug header interferes with 
       nearby pin headers, making it impossible to populate the debug header 
       with a right angle header and .1" pitch pin header.
       
       Specified load capacitors on the crystal are wrong.  The crystal will 
       stabilize on boot, but will not remain.
       
       Radio CONFIG pin is wired to MCU to allow easy entrance into command
       mode.  This should be connected to a different pin.
       
       
       
TO DO
------------------------

1.  MS430Firmware:  1.  Startup sleep mode -> poll mag and exit on high value
                    2.  Startup procedure -> broadcast calibration data
                    3.  Startup procedure -> read radio ID to store UID
                    4.  TX mirror         -> Prepend UID to TX'd packets
                    
2.  SensorTag       1.  Clean up firmware  -> remove deadwood
                    2.  
                    
3.  Labview         1.  Radio interface  ->  AT command mode control to select
                                             radio to listen to
                    2.  Sensor interface ->  Formalize calibration code
                    3.  Sensor interface ->  Formalize data processing
                    4.  Sensor interface ->  Add "remote globals"
                      